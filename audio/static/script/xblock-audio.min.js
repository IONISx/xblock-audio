function AudioXBlockStudio(a,b){var c=new AudioXBlock.Server(a,b),d=new AudioXBlock.StudioView(c,a,b);d.render()}function AudioXBlockStudent(a,b){var c=new AudioXBlock.Server(a,b),d=new AudioXBlock.StudentView(c,a,b);d.render()}"undefined"!=typeof AudioXBlock&&AudioXBlock||(AudioXBlock={}),AudioXBlock.Server=function(){this.constructor.apply(this,arguments)},AudioXBlock.Server.prototype={constructor:function(a,b){this.runtime=a,this.element=b},url:function(a){return this.runtime.handlerUrl(this.element,a)},request:function(a,b){return $.ajax({type:"POST",url:this.url(a),data:JSON.stringify(b||{})})},getState:function(){var a=$.Deferred();return this.request("get_state").done(function(b){b.success?a.resolve(b.state):a.reject([b.msg])}).fail(function(){a.reject(["Unable to retrieve the sound url"])}),a.promise()},play:function(){var a=$.Deferred();return this.request("play").done(function(b){b.success?a.resolve(b.url):a.reject([b.msg])}).fail(function(){a.reject(["Unable to retrieve the sound url"])}),a.promise()},edit:function(a){var b=$.Deferred();return this.request("edit",a).done(function(a){a.success?b.resolve(a):b.reject([a.msg])}).fail(function(){b.reject(["This problem could not be saved."])}),b.promise()}},AudioXBlock.StudioView=function(){this.constructor.apply(this,arguments)},AudioXBlock.StudioView.prototype={constructor:function(a,b,c){this.runtime=b,this.server=a,this.element=$(c)},save:function(){var a=this.element.find("#settings-tab"),b=a.data("metadata");this.element.find(".metadata_entry").each(function(){var a=$(this).find(".setting-input");b[a.data("field-name")].value=a.val()}),this.runtime.notify("save",{state:"start"});var c=this;this.server.edit({metadata:b}).done(function(){c.runtime.notify("save",{state:"end"}),a.data("metadata",b)}).fail(function(a){c.showError(a)})},cancel:function(){this.runtime.notify("cancel",{})},showError:function(a){this.runtime.notify("error",{msg:a})},setupEvents:function(){var a=this;this.element.on("click",".save-button",function(){a.save()}),this.element.on("click",".cancel-button",function(){a.cancel()})},render:function(){this.setupEvents()}},AudioXBlock.StudentView=function(){this.constructor.apply(this,arguments)},AudioXBlock.StudentView.prototype={constructor:function(a,b,c){this.runtime=b,this.server=a,this.element=$(c),this.state=null,this.templates={main:Handlebars.compile(this.element.find("#xblock-audio-main").html()),player:Handlebars.compile(this.element.find("#xblock-audio-player").html())}},_initializeEvents:function(){this.state.options.showControls&&(this.element.find(".control.play").click(_.bind(this.play,this)),this.element.find(".control.pause").click(_.bind(this.pause,this)),this.element.find(".control.stop").click(_.bind(this.stop,this)))},_updateState:function(){var a=this,b=$.Deferred();return this.server.getState().done(function(c){a.state=c,b.resolve(c)}).fail(function(a){b.reject(a)}),b.promise()},_createSound:function(a){return this.sound&&delete this.sound,this.sound=new Howl({urls:[a],onend:_.bind(this.stop,this)}),this.sound},_serializeData:function(){return _.extend(this.state,{playing:"playing"===this.playerState,onlyOnePlay:1===this.state.maxPlays,lastPlay:this.state.plays===this.state.maxPlays})},_refreshView:function(){var a=this.element.find(".xblock-audio-content"),b=this._serializeData();a.html(this.templates.main(b)),this.state.options.showControls&&a.prepend(this.templates.player(b)),this._initializeEvents(),this.state.options.autoplay&&!this.autoplayed&&(this.autoplayed=!0,this.play())},play:function(){var a=this,b=$.Deferred();return this.sound&&"paused"===this.playerState?(this.unpause(),b.resolve()):"playing"===this.playerState?b.reject(["Sound is already playing"]):this.server.play().done(function(c){a._createSound(c),a.sound.play(),a.playerState="playing",b.resolve(),a.render()}),b.promise()},pause:function(){this.state.options.showControls&&this.sound&&"playing"===this.playerState&&(this.sound.pause(),this.playerState="paused",this.render())},unpause:function(){this.state.options.showControls&&this.sound&&"paused"===this.playerState&&(this.sound.play(),this.playerState="playing",this.render())},stop:function(){this.sound&&(this.sound.stop(),delete this.playerState,delete this.sound,this.render())},render:function(){this._updateState().done(_.bind(this._refreshView,this))}};